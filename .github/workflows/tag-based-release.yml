name: Tag Based Release Workflow

# トップレベルのパーミッション設定（全ジョブに適用）
permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  prepare-release:
    name: Prepare Release Branch and PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Extract version from tag
        id: extract-version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=release/$TAG_NAME" >> $GITHUB_ENV
          echo "Extracted version: $VERSION from tag: $TAG_NAME"
      
      - name: Create release branch
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git checkout -b ${{ env.BRANCH_NAME }}
          echo "Created branch: ${{ env.BRANCH_NAME }}"
      
      - name: Update package.json version
        run: |
          echo "Updating package.json and package-lock.json to version ${{ env.VERSION }}..."
          
          # npmコマンドでバージョンを更新（GitHub Actions環境で最も確実な方法）
          npm version ${{ env.VERSION }} --no-git-tag-version --allow-same-version
          
          # バージョン更新の確認
          UPDATED_VERSION=$(node -p "require('./package.json').version")
          echo "✓ Updated to version: $UPDATED_VERSION"
          
          # 簡単な検証
          echo "==== VERIFICATION ===="
          echo "package.json version:"
          grep -A1 '"version"' package.json
          
          echo "package-lock.json version:"
          grep -A1 '"version"' package-lock.json | head -2
      
      - name: Update README files
        run: |
          # READMEファイル内のバージョン参照を更新
          echo "Updating README files to version v${{ env.VERSION }}..."
          
          # README.mdとREADME-ja.mdを更新
          for file in README.md README-ja.md; do
            echo "Processing $file..."
            
            # ファイルのバックアップを作成
            cp $file ${file}.bak
            
            # ダウンロードリンクを更新（複数行の置換）
            sed -i -r "s/bedrock-engineer-[0-9]+\.[0-9]+\.[0-9]+\.dmg/bedrock-engineer-${{ env.VERSION }}.dmg/g" $file
            sed -i -r "s/bedrock-engineer-[0-9]+\.[0-9]+\.[0-9]+\.pkg/bedrock-engineer-${{ env.VERSION }}.pkg/g" $file
            sed -i -r "s/bedrock-engineer-[0-9]+\.[0-9]+\.[0-9]+-setup\.exe/bedrock-engineer-${{ env.VERSION }}-setup.exe/g" $file
            
            # 一般的なバージョン参照パターンを更新
            sed -i -r "s/v[0-9]+\.[0-9]+\.[0-9]+([^0-9])/v${{ env.VERSION }}\1/g" $file
            sed -i -r "s/\(v[0-9]+\.[0-9]+\.[0-9]+\+\)/\(v${{ env.VERSION }}+\)/g" $file
            sed -i -r "s/> v[0-9]+\.[0-9]+\.[0-9]+/> v${{ env.VERSION }}/g" $file
            sed -i -r "s/Starting with v[0-9]+\.[0-9]+\.[0-9]+/Starting with v${{ env.VERSION }}/g" $file
            
            # 更新結果の確認
            echo "Checking download links update..."
            grep -n "bedrock-engineer-${{ env.VERSION }}" $file || echo "⚠️ Download links not updated in $file"
            
            echo "Checking version references..."
            grep -n "v${{ env.VERSION }}" $file || echo "⚠️ Version references not updated in $file"
            
            # バックアップ削除
            rm -f ${file}.bak
          done
      
      - name: Commit changes
        run: |
          git add package.json package-lock.json README.md README-ja.md
          git commit -m "chore: update version to ${{ env.VERSION }}"
          git push origin ${{ env.BRANCH_NAME }}
          echo "Pushed changes to branch: ${{ env.BRANCH_NAME }}"
          
      # 既存のdraft-release.ymlを直接呼び出して実行
      - name: Trigger draft release workflow
        run: |
          # リリースブランチをプッシュした後、ドラフトリリースワークフローが起動するのを待つ
          echo "リリースブランチがプッシュされました。ドラフトリリースワークフローが起動されます。"
          # 10秒待って、ワークフローがGitHubに登録されるのを確認
          sleep 10
          
      # PRの作成
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release v${{ env.VERSION }}"
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "リリース v${{ env.VERSION }}"
          body: |
            ## リリース v${{ env.VERSION }} の準備
            
            このPRは `${{ env.TAG_NAME }}` タグがプッシュされたことをトリガーに自動生成されました。
            
            ### 変更内容
            - package.json のバージョンを `${{ env.VERSION }}` に更新
            - README.md と README-ja.md のバージョン参照を更新
            - リリースブランチの作成により、ドラフトリリースワークフローが自動的に起動されます
            
            ### 次のステップ
            1. このPRのレビューと承認をお願いします
            2. [Actionsタブ](https://github.com/aws-samples/bedrock-engineer/actions)でワークフローの完了を確認してください
            3. [Releasesページ](https://github.com/aws-samples/bedrock-engineer/releases)でドラフトリリースを確認してください
            4. ビルド成果物のチェックが完了したらマージしてください
            5. マージするとリリースが自動的に公開されます
          
          # ラベル適用はエラーの原因になるため無効化（権限の問題）
          # labels: "release"
          draft: false
      
      - name: Output PR URL
        run: |
          echo "Pull Request created: ${{ steps.create-pr.outputs.pull-request-url }}"
