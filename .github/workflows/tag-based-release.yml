name: Tag Based Release Workflow

# トップレベルのパーミッション設定（全ジョブに適用）
permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  prepare-release:
    name: Prepare Release Branch and PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Extract version from tag
        id: extract-version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=release/$TAG_NAME" >> $GITHUB_ENV
          echo "Extracted version: $VERSION from tag: $TAG_NAME"
      
      - name: Create release branch
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git checkout -b ${{ env.BRANCH_NAME }}
          echo "Created branch: ${{ env.BRANCH_NAME }}"
      
      - name: Update package.json version
        run: |
          # 直接 jq を使って package.json を更新する（npm version コマンドより確実）
          cat package.json | jq ".version = \"${{ env.VERSION }}\"" > package.json.tmp
          mv package.json.tmp package.json
          
          # package-lock.json も更新する
          cat package-lock.json | jq ".version = \"${{ env.VERSION }}\" | .packages.\"\".version = \"${{ env.VERSION }}\"" > package-lock.json.tmp
          mv package-lock.json.tmp package-lock.json
          
          echo "Updated package.json and package-lock.json to version ${{ env.VERSION }}"
      
      - name: Update README files
        run: |
          # READMEファイル内の特定のバージョン表記を更新する関数
          update_version_references() {
            local file=$1
            local new_version=$2
            
            # バージョン参照を更新する複数のパターン
            # 1. v1.6.0 のような具体的なバージョン番号
            sed -i -E "s/v1\.[0-9]+\.[0-9]+([^0-9])/v$new_version\1/g" $file
            
            # 2. (v1.10.0+) のような形式
            sed -i -E "s/\(v1\.[0-9]+\.[0-9]+\+\)/\(v$new_version+\)/g" $file
            
            # 変更を確認
            echo "Updated versions in $file:"
            grep -n "v$new_version" $file | head -5
          }
          
          # 両方のREADMEファイルを更新
          echo "Updating README.md..."
          update_version_references README.md ${{ env.VERSION }}
          
          echo "Updating README-ja.md..."
          update_version_references README-ja.md ${{ env.VERSION }}
      
      - name: Commit changes
        run: |
          git add package.json README.md README-ja.md
          git commit -m "chore: update version to ${{ env.VERSION }}"
          git push origin ${{ env.BRANCH_NAME }}
          echo "Pushed changes to branch: ${{ env.BRANCH_NAME }}"
          
      # 既存のdraft-release.ymlを直接呼び出して実行
      - name: Trigger draft release workflow
        run: |
          # リリースブランチをプッシュした後、ドラフトリリースワークフローが起動するのを待つ
          echo "リリースブランチがプッシュされました。ドラフトリリースワークフローが起動されます。"
          # 30秒待って、ワークフローがGitHubに登録されるのを確認
          sleep 30
          
      # PRの作成
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release v${{ env.VERSION }}"
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "リリース v${{ env.VERSION }}"
          body: |
            ## リリース v${{ env.VERSION }} の準備
            
            このPRは `${{ env.TAG_NAME }}` タグがプッシュされたことをトリガーに自動生成されました。
            
            ### 変更内容
            - package.json のバージョンを `${{ env.VERSION }}` に更新
            - README.md と README-ja.md のバージョン参照を更新
            - リリースブランチの作成により、ドラフトリリースワークフローが自動的に起動されます
            
            ### 次のステップ
            1. このPRのレビューと承認をお願いします
            2. [Actionsタブ](https://github.com/aws-samples/bedrock-engineer/actions)でワークフローの完了を確認してください
            3. [Releasesページ](https://github.com/aws-samples/bedrock-engineer/releases)でドラフトリリースを確認してください
            4. ビルド成果物のチェックが完了したらマージしてください
            5. マージするとリリースが自動的に公開されます
          
          labels: "release"
          draft: false
      
      - name: Output PR URL
        run: |
          echo "Pull Request created: ${{ steps.create-pr.outputs.pull-request-url }}"